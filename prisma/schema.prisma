// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("MONGODB_URL")
// }

// model User {
//     id               String         @id @default(auto()) @map("_id") @db.ObjectId
//     name             String?
//     description      String?
//     location         String?
//     website          String?
//     photoUrl         String?
//     headerUrl        String?
//     username         String         @unique
//     password         String
//     isPremium        Boolean        @default(false)
//     createdAt        DateTime       @default(now())
//     updatedAt        DateTime       @default(now()) @updatedAt
//     createdTweets    Tweet[]        @relation("userTweets")
//     likedTweets      String[]       // Array to store liked tweet IDs
//     retweets         String[]
//     followers        Follow[]       @relation("followed")
//     following        Follow[]       @relation("follower")
//     sentMessages     Message[]      @relation("userMessagesSent")
//     receivedMessages Message[]      @relation("userMessagesReceived")
//     notifications    Notification[]
// }

// model Tweet {
//     id          String   @id @default(auto()) @map("_id") @db.ObjectId
//     text        String
//     createdAt   DateTime @default(now())
//     author      User     @relation("userTweets", fields: [authorId], references: [id])
//     authorId    String   @db.ObjectId
//     photoUrl    String?
//     likedBy     String[] // Array to store user IDs who liked the tweet
//     retweetedBy String[] 
//     replies     Tweet[]  @relation("tweetReplies")
//     retweets    Tweet[]  @relation("retweetOf")
//     isRetweet   Boolean  @default(false)
//     retweetOf   Tweet?   @relation("retweetOf", fields: [retweetOfId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//     retweetOfId String?  @db.ObjectId
//     isReply     Boolean  @default(false)
//     repliedTo   Tweet?   @relation("tweetReplies", fields: [repliedToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//     repliedToId String?  @db.ObjectId
// }

// model Message {
//     id          String   @id @default(auto()) @map("_id") @db.ObjectId
//     text        String
//     createdAt   DateTime @default(now())
//     sender      User     @relation("userMessagesSent", fields: [senderId], references: [id])
//     senderId    String   @db.ObjectId
//     recipient   User     @relation("userMessagesReceived", fields: [recipientId], references: [id])
//     recipientId String   @db.ObjectId
//     photoUrl    String?
// }

// model Notification {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     type      String
//     content   String
//     createdAt DateTime @default(now())
//     isRead    Boolean  @default(false)
//     user      User     @relation(fields: [userId], references: [id])
//     userId    String   @db.ObjectId
// }

// model Follow {
//     id         String @id @default(auto()) @map("_id") @db.ObjectId
//     follower   User   @relation("follower", fields: [followerId], references: [id])
//     followerId String @db.ObjectId
//     followed   User   @relation("followed", fields: [followedId], references: [id])
//     followedId String @db.ObjectId
// }